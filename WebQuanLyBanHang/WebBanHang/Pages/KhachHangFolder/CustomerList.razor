@page "/customer-list"
@* @using NguyenTuanK55.Models *@
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
<AuthRedirect />

<style>
    .video-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        overflow: hidden;
    }

        .video-background video {
            min-width: 100%;
            min-height: 100%;
            width: auto;
            height: auto;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-size: cover;
        }

    h1.my-4 {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

        h1.my-4::after {
            content: '';
            display: block;
            width: 200px;
            height: 4px;
            background: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(9,9,121,1) 35%, rgba(0,212,255,1) 100%);
            margin: 10px auto 0;
            border-radius: 2px;
        }

    .h1 {
        margin-bottom: 30px;
    }

    .btn-primary {
        border-radius: 5px;
    }

    .btn-danger {
        border-radius: 5px;
    }

    .table-responsive {
        margin-top: 20px;
    }

    .table {
        border-radius: 5px;
        overflow: hidden;
        border-collapse: separate;
        border-spacing: 0;
    }

    .thead-dark th {
        background-color: #DF9900;
        color: white;
        border-color: black !important;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: rgba(255, 255, 255, 0.9);
    }

    .table-striped tbody tr:nth-of-type(even) {
        background-color: rgba(225, 235, 234, 0.9);
    }

    .table-bordered {
        border: 1px solid black;
    }

        .table-bordered th,
        .table-bordered td {
            border: 1px solid grey !important;
        }

    .table-middle {
        vertical-align: middle !important;
    }

    .img-thumbnail {
        border-radius: 5px;
    }

    .text-center {
        text-align: center;
    }

    .text-end {
        text-align: right;
    }

    .mr-1 {
        margin-right: 5px;
    }

    .table tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.2);
        cursor: pointer;
    }

    .search-container {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        margin-bottom: 10px;
    }

        .search-container input {
            width: 200px;
            border-radius: 5px;
            padding: 5px;
            margin-right: 5px;
        }

        .search-container button {
            margin-right: 5px;
        }
</style>

<h1 class="text-center my-4">Danh Sách Khách Hàng</h1>

<div class="video-background">
    <video autoplay loop muted playsinline>
        <source src="videos/customerlist.mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>
</div>

<div class="search-container">
    <input type="text" placeholder="Tìm kiếm khách hàng..." @bind="searchTerm" @bind:event="oninput" />
    <button class="btn btn-primary" @onclick="SearchCustomers">
        <i class="fas fa-search"></i> Tìm
    </button>
    <button class="btn btn-success" @onclick="CreateCustomer">
        <i class="fas fa-plus"></i> Thêm Khách Hàng
    </button>
</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered table-dark-borders">
            <thead class="thead-dark">
                <tr>
                    <th class="text-center">Mã KH</th>
                    <th class="text-center">Tên Khách Hàng</th>
                    <th class="text-center">Ngày Sinh</th>
                    <th class="text-center">Giới Tính</th>
                    <th class="text-center">Địa Chỉ</th>
                    <th class="text-center">Số Điện Thoại</th>
                    <th class="text-center">Email</th>
                    <th class="text-center">Hành Động</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var khachHang in filteredKhachHangs)
                {
                    <tr>
                        <td class="table-middle">@khachHang.KhachHangId</td>
                        <td class="table-middle">@khachHang.TenKhachHang</td>
                        <td class="table-middle text-center">@khachHang.NgaySinh?.ToShortDateString()</td>
                        <td class="table-middle text-center">@((khachHang.GioiTinh) ? "Nam" : "Nữ")</td>
                        <td class="table-middle">@khachHang.DiaChi</td>
                        <td class="table-middle">@khachHang.SoDienThoai</td>
                        <td class="table-middle">@khachHang.Email</td>
                        <td class="table-middle text-center">
                            <button class="btn btn-primary btn-sm mr-1" @onclick="() => EditCustomer(khachHang.KhachHangId)">
                                Sửa
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteCustomer(khachHang.KhachHangId)">
                                Xóa
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<KhachHang> KhachHangs;
    private List<KhachHang> filteredKhachHangs;
    private bool isLoading = true;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        KhachHangs = await DbContext.KhachHangs.ToListAsync();
        filteredKhachHangs = KhachHangs;
        isLoading = false;
    }

    private void CreateCustomer()
    {
        Navigation.NavigateTo("/customer-add");
    }

    private void EditCustomer(int khachHangId)
    {
        Navigation.NavigateTo($"/customer-edit/{khachHangId}");
    }

    private async Task ConfirmDeleteCustomer(int khachHangId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa khách hàng này không?"))
        {
            var khachHang = await DbContext.KhachHangs.FindAsync(khachHangId);
            if (khachHang != null)
            {
                DbContext.KhachHangs.Remove(khachHang);
                await DbContext.SaveChangesAsync();
                KhachHangs.Remove(khachHang); // Remove from the list to update the UI
                FilterCustomers(); // Update the filtered list after removal
            }
        }
    }

    private void SearchCustomers()
    {
        FilterCustomers();
    }

    private void FilterCustomers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredKhachHangs = KhachHangs;
        }
        else
        {
            filteredKhachHangs = KhachHangs
                .Where(kh => kh.KhachHangId.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                             kh.TenKhachHang.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                             kh.NgaySinh?.ToString("dd/MM/yyyy").Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
                             (kh.GioiTinh ? "Nam" : "Nữ").Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                             kh.DiaChi.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                             kh.SoDienThoai.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                             kh.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
}